# argo template delete ci-pipeline-underpin-simple -n argo
# argo template create kubernetes/workflow/test_step.yaml -n argo

#argo template lint kubernetes/workflow/test_step.yaml
# 1. make sure that we have the secret for the repo added to the namespace
# kubectl create secret generic git-cred   --from-file=ssh=$HOME/.ssh/id_rsa   --from-file=known_hosts=$HOME/.ssh/known_hosts -n argo
# kubectl create secret generic git-creds    --from-file=ssh=$HOME/.ssh/mr-saoirse --from-file=id_rsa=$HOME/.ssh/mr-saoirse --from-file=id_rsa.pub=$HOME/.ssh/mr-saoirse.pub   --from-file=known_hosts=$HOME/.ssh/known_hosts -n argo
# 2. build a test version of underpin to just accept params and print them
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ci-pipeline-underpin-simple
spec:
  # ttlStrategy:
  #   secondsAfterCompletion: 60
  #   secondsAfterSuccess: 60
  #   secondsAfterFailure: 360
  arguments:
    parameters:
      - name: source-repo
        value: git@github.com:mr-saoirse/underpinnings.git
      - name: target-repo
        value: git@github.com:mr-saoirse/cloud-stack.git
      - name: branch
        value: main
      - name: sha
        value: abc
      - name: app-jobs
        value: |-
          [
            {"app_dir" : "apps/default/deployment_minimal"}
          ]
  entrypoint: pipeline
  # #prepare a volume for the entire workflow
  volumeClaimTemplates:
    - metadata:
        name: source-dir
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
  #use for git-sync ssh
  volumes:
    - name: git-secret
      secret:
        defaultMode: 256
        secretName: git-cred # your-ssh-key
    - name: git-secret-source
      secret:
        defaultMode: 256
        secretName: git-creds # your-ssh-key

  #start the sequence
  templates:
    - name: pipeline
      steps:
        - - name: check-repo
            template: check-repo
        - - name: underpin
            template: underpin
            withParam: "{{workflow.parameters.app-jobs}}"
            arguments:
              parameters:
                - name: action
                  value: "run"
                - name: app-dir
                  value: "{{item.app_dir}}"
        - - name: merge
            template: underpin
            arguments:
              parameters:
                - name: action
                  value: "update"
                - name: app-dir
                  value: ""

    - name: check-repo
      container:
        image: alpine:latest
        command: [sh, -c]
        args:
          [
            "echo getting files from volume; ls /root/ mkdir /root/.underpin/cloned/test; touch /root/.underpin/cloned/test/hi.txt;  echo --------- ;  ls /root/.underpin  ; echo -----cloned---- ;ls /root/.underpin/cloned ; echo ----underpinnings----- ;ls /root/.underpin/cloned/underpinnings.git/  > ls.txt; cat ls.txt;",
          ]
        volumeMounts:
          - name: source-dir
            mountPath: /root/.underpin/

      #this is the git fetch magic as an init container in the first step
      initContainers:
        - image: k8s.gcr.io/git-sync:v3.1.6
          args:
            - "--repo={{workflow.parameters.source-repo}}"
            - "--root=/root/.underpin/cloned/"
            - "--branch=main"
            - "--wait=5"
            - "--max-sync-failures=3"
            - "--timeout=200"
            - "--ssh"
            - "--one-time"
          name: git-data
          volumeMounts:
            - name: source-dir
              mountPath: /root/.underpin/
            - name: git-secret
              mountPath: /etc/git-secret
      securityContext:
        runAsUser: 0 # to allow read of ssh key

    - name: underpin
      inputs:
        parameters:
          - name: action
            value: run
          - name: app-dir
            value: ""
      container:
        image: mrsaoirse/underpinnings:latest
        command: [poetry]
        imagePullPolicy: Always
        #the volume root is set with underpin home the we look for the source and target root at this location
        args: [
            "run",
            "underpin",
            "{{ inputs.parameters.action }}",
            #args
            "--sha",
            "{{ workflow.parameters.sha }}",
            "--app-dir",
            #note we needed to qualify as we have done it here but we can think about the convention and params later
            "{{ inputs.parameters.app-dir }}",
            "--source-repo",
            "{{ workflow.parameters.source-repo }}",
            "--target-repo",
            "{{ workflow.parameters.target-repo }}",
          ]
        volumeMounts:
          - name: source-dir
            #its a bit funky to mount right into the repo but will do this for now
            mountPath: /root/.underpin/
          - name: git-secret-source
            mountPath: /root/.ssh/
